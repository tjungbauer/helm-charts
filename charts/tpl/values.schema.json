{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "TPL Library Chart Values Schema",
  "description": "Schema for validating values used with the TPL library chart templates",
  "properties": {
    "tolerations": {
      "type": "array",
      "description": "Node tolerations for pods",
      "items": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "operator": { 
            "type": "string", 
            "enum": ["Exists", "Equal"] 
          },
          "value": { "type": "string" },
          "effect": { 
            "type": "string", 
            "enum": ["NoSchedule", "PreferNoSchedule", "NoExecute"] 
          },
          "tolerationSeconds": { "type": "integer", "minimum": 0 }
        },
        "required": ["key", "operator", "effect"]
      }
    },
    "resources": {
      "type": "object",
      "description": "Resource requests and limits",
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "cpu": { "type": ["string", "number"] },
            "memory": { "type": ["string", "number"] },
            "ephemeral-storage": { "type": ["string", "number"] }
          }
        },
        "limits": {
          "type": "object",
          "properties": {
            "cpu": { "type": ["string", "number"] },
            "memory": { "type": ["string", "number"] },
            "ephemeral-storage": { "type": ["string", "number"] },
            "nvidia": { "type": "integer", "minimum": 0 }
          }
        }
      }
    },
    "nodeSelector": {
      "type": "object",
      "description": "Node selector configuration",
      "properties": {
        "key": { "type": "string" },
        "value": { "type": "string" }
      },
      "required": ["key"]
    },
    "serviceAccount": {
      "type": "object",
      "properties": {
        "create": { "type": "boolean", "default": false },
        "name": { "type": "string" },
        "annotations": { "type": "object" }
      }
    },
    "securityContext": {
      "type": "object",
      "description": "Container-level security context configuration",
      "properties": {
        "runAsUser": { 
          "type": "integer", 
          "minimum": 0,
          "description": "The UID to run the entrypoint of the container process"
        },
        "runAsGroup": { 
          "type": "integer", 
          "minimum": 0,
          "description": "The GID to run the entrypoint of the container process"
        },
        "fsGroup": { 
          "type": "integer", 
          "minimum": 0,
          "description": "A special supplemental group that applies to all containers in a pod"
        },
        "runAsNonRoot": { 
          "type": "boolean", 
          "default": true,
          "description": "Indicates that the container must run as a non-root user"
        },
        "readOnlyRootFilesystem": { 
          "type": "boolean", 
          "default": true,
          "description": "Whether this container has a read-only root filesystem"
        },
        "allowPrivilegeEscalation": {
          "type": "boolean",
          "default": false,
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process"
        },
        "capabilities": {
          "type": "object",
          "description": "The capabilities to add/drop when running containers",
          "properties": {
            "add": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Added capabilities"
            },
            "drop": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Removed capabilities"
            }
          }
        }
      }
    },
    "podSecurityContext": {
      "type": "object",
      "description": "Pod-level security context configuration",
      "properties": {
        "runAsUser": { 
          "type": "integer", 
          "minimum": 0,
          "description": "The UID to run the entrypoint of the container process"
        },
        "runAsGroup": { 
          "type": "integer", 
          "minimum": 0,
          "description": "The GID to run the entrypoint of the container process"
        },
        "fsGroup": { 
          "type": "integer", 
          "minimum": 0,
          "description": "A special supplemental group that applies to all containers in a pod"
        },
        "runAsNonRoot": { 
          "type": "boolean", 
          "default": true,
          "description": "Indicates that containers must run as a non-root user"
        },
        "seccompProfile": {
          "type": "object",
          "description": "The seccomp options to use by the containers in this pod",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Unconfined", "RuntimeDefault", "Localhost"],
              "description": "Indicates which kind of seccomp profile will be applied"
            },
            "localhostProfile": {
              "type": "string",
              "description": "Indicates a profile defined in a file on the node should be used"
            }
          },
          "required": ["type"]
        },
        "seLinuxOptions": {
          "type": "object",
          "description": "The SELinux context to be applied",
          "properties": {
            "level": { "type": "string", "description": "Level is SELinux level label that applies to the container" },
            "role": { "type": "string", "description": "Role is a SELinux role label that applies to the container" },
            "type": { "type": "string", "description": "Type is a SELinux type label that applies to the container" },
            "user": { "type": "string", "description": "User is a SELinux user label that applies to the container" }
          }
        },
        "supplementalGroups": {
          "type": "array",
          "items": { "type": "integer", "minimum": 0 },
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID"
        },
        "sysctls": {
          "type": "array",
          "description": "A list of namespaced sysctls used for the pod",
          "items": {
            "type": "object",
            "properties": {
              "name": { "type": "string", "description": "Name of a property to set" },
              "value": { "type": "string", "description": "Value of a property to set" }
            },
            "required": ["name", "value"]
          }
        }
      }
    },
    "namespace": {
      "type": "object",
      "properties": {
        "bindtoNode": {
          "type": "object",
          "properties": {
            "role": { "type": "string" },
            "operator": { "type": "string", "default": "Equal" },
            "effect": { "type": "string", "default": "NoSchedule" },
            "value": { "type": "string", "default": "reserved" }
          },
          "required": ["role"]
        },
        "additionalAnnotations": { "type": "object" },
        "additionalLabels": { "type": "object" }
      }
    },
    "matchExpressions": {
      "type": "array",
      "description": "Match expressions for label selectors",
      "items": {
        "type": "object",
        "properties": {
          "key": { 
            "type": "string",
            "description": "Label key that the selector applies to"
          },
          "operator": { 
            "type": "string", 
            "enum": ["In", "NotIn", "Exists", "DoesNotExist"],
            "description": "Represents a key's relationship to a set of values"
          },
          "values": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Array of string values"
          }
        },
        "required": ["key", "operator"]
      }
    },
    "namespaceSelector": {
      "type": "object",
      "description": "Namespace selector configuration",
      "properties": {
        "matchLabels": {
          "type": "object",
          "description": "Map of {key,value} pairs"
        },
        "matchExpressions": {
          "$ref": "#/properties/matchExpressions"
        }
      }
    }
  }
}
