name: Update Chart Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**/values*.yaml'
      - 'charts/**/Chart.yaml'
  pull_request:
    paths:
      - 'charts/**/values*.yaml'
      - 'charts/**/Chart.yaml'
  workflow_dispatch:

jobs:
  update-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install helm-docs
        run: |
          cd /tmp
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.14.2/helm-docs_1.14.2_Linux_x86_64.tar.gz
          tar -xzf helm-docs_1.14.2_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/bin

      - name: Update documentation for all charts
        run: |
          #!/bin/bash
          set -euo pipefail
          
          # Function to determine the correct values file
          get_values_file() {
            local chart_dir="$1"
            
            # Check for different values file patterns in order of preference
            if [[ -f "$chart_dir/values_example.yaml" && -s "$chart_dir/values_example.yaml" ]]; then
              echo "$chart_dir/values_example.yaml"
            elif [[ -f "$chart_dir/values-example.yaml" && -s "$chart_dir/values-example.yaml"  ]]; then
              echo "$chart_dir/values-example.yaml"

            elif [[ -f "$chart_dir/values_examples.yaml" && -s "$chart_dir/values_examples.yaml" ]]; then
              echo "$chart_dir/values_examples.yaml"
            elif [[ -f "$chart_dir/values-examples.yaml" && -s "$chart_dir/values-examples.yaml"  ]]; then
              echo "$chart_dir/values-examples.yaml"

            elif [[ -f "$chart_dir/values.yaml" && -s "$chart_dir/values.yaml" ]]; then
              echo "$chart_dir/values.yaml"

            else
              # Look for versioned values files (like values-6.0.yaml)
              local versioned_values=$(find "$chart_dir" -name "values-*.yaml" -type f | head -1)
              if [[ -n "$versioned_values" ]]; then
                echo "$versioned_values"
              else
                echo ""
              fi
            fi
          }
          
          # Update docs for each chart
          for chart_dir in charts/*/; do
            if [[ -f "$chart_dir/Chart.yaml" ]]; then
              chart_name=$(basename "$chart_dir")
              echo "Processing chart: $chart_name"
              
              values_file=$(get_values_file "$chart_dir")
              
              if [[ -n "$values_file" ]]; then
                echo "  Using values file: $values_file"
                
                # Create helm-docs config for this specific chart
                cat > "$chart_dir/.helm-docs.yml" << EOF
          chart-search-root: .
          template-files:
            - README.md.gotmpl
          values-file: $(basename "$values_file")
          EOF
                
                # Run helm-docs for this chart
                helm-docs --chart-search-root="$chart_dir" -t "$chart_dir/../../_templates.gotmpl" --template-files="$chart_dir/README.md.gotmpl"
                
                # Clean up temporary config file
                rm -f "$chart_dir/.helm-docs.yml"
                
                echo "  ✓ Documentation updated for $chart_name"
              else
                echo "  ⚠️  No values file found for $chart_name, skipping..."
              fi
            fi
          done

      - name: Check for documentation changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "The following files were changed:"
            git status --porcelain
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          fi

      - name: Safety check - only documentation files
        if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name != 'pull_request'
        id: safety-check
        run: |
          # Ensure only README.md files in charts/ directories were modified
          changed_files=$(git diff --name-only HEAD)
          echo "Changed files:"
          echo "$changed_files"
          
          if echo "$changed_files" | grep -v '^charts/.*/README\.md$' | grep -q .; then
            echo "❌ Non-documentation files detected:"
            echo "$changed_files" | grep -v '^charts/.*/README\.md$'
            echo "safety_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Only documentation files detected, safe to push"
            echo "safety_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push documentation updates
        if: steps.verify-changed-files.outputs.changed == 'true' && steps.safety-check.outputs.safety_passed == 'true' && github.event_name != 'pull_request'
        run: |
          # Configure git
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add only README.md files in charts directories
          git add charts/*/README.md
          
          # Show what will be committed
          echo "Files to be committed:"
          git diff --cached --name-only
          
          # Commit the changes
          git commit -m "docs: update chart documentation via helm-docs

          - Auto-generated documentation updates
          - Updated by helm-docs workflow
          
          [skip ci]" || {
            echo "No changes to commit"
            exit 0
          }
          
          # Force push to main branch (with lease for safety)
          echo "Pushing documentation updates to main branch..."
          git push --force-with-lease origin HEAD:main


      #     - name: Create Pull Request for documentation updates
      #     if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name != 'pull_request'
      #     uses: peter-evans/create-pull-request@v7
      #     with:
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #       commit-message: |
      #         docs: update chart documentation via helm-docs
              
      #         - Auto-generated documentation updates
      #         - Updated by helm-docs workflow
      #       title: '📚 Update Chart Documentation'
      #       body: |
      #         ## 📚 Automated Documentation Update
              
      #         This PR contains auto-generated documentation updates for Helm charts.
              
      #         ### Changes
      #         - Updated chart documentation using helm-docs
      #         - Synchronized with latest values.yaml changes
              
      #         ### Files Modified
      #         ```
      #         $(git diff --name-only)
      #         ```
              
      #         ---
      #         🤖 This PR was automatically created by the Update Chart Documentation workflow.
      #       branch: docs/update-chart-documentation
      #       delete-branch: true
      #       draft: false
      #       add-paths: |
      #         charts/*/README.md

      # - name: Comment on PR with documentation status
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@main
      #   with:
      #     script: |
      #       const changedFiles = '${{ steps.verify-changed-files.outputs.changed }}';
      #       let body = '';
            
      #       if (changedFiles === 'true') {
      #         body = '📚 **Documentation Update Needed**\n\nHelm-docs detected changes that would update chart documentation. The documentation will be automatically updated when this PR is merged.';
      #       } else {
      #         body = '✅ **Documentation Up to Date**\n\nNo documentation changes are needed for this PR.';
      #       }
            
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: body
      #       })
